" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
" }


" Plugins {
" Vundle {
"UnBundle 'Shougo/neocomplcache'
"UnBundle 'Shougo/neosnippet'
UnBundle 'scrooloose/nerdcommenter'
UnBundle 'spf13/vim-autoclose'
UnBundle 'mhinz/vim-signify'
UnBundle 'vim-scripts/sessionman.vim'
UnBundle 'mileszs/ack.vim'
UnBundle 'bling/vim-bufferline'
UnBundle 'Lokaltog/vim-easymotion'
UnBundle 'tpope/vim-haml'
UnBundle 'kchmck/vim-coffee-script'
UnBundle 'majutsushi/tagbar'
"UnBundle 'tpope/vim-fugitive'
" }

" vim-airline{
let g:airline#extensions#tabline#enabled = 1

" }

" AG search {
"let g:agprg="ag -iG \".*\.[Ch]$\" --column"
command! -bang -nargs=* -complete=file AckCs       call ack#Ack("grep<bang> -G '.*\\.cs$'", <q-args>)
command! -bang -nargs=* -complete=file AckJs       call ack#Ack("grep<bang> -G '.*\\.js$'", <q-args>)
command! -bang -nargs=* -complete=file AckCpp       call ack#Ack("grep<bang> -G '.*\\.[Ch]$'", <q-args>)
" }

" CtrlP {
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_follow_symlinks = 1

nnoremap m :CtrlPMRUFiles<CR>
nnoremap f :CtrlPFunky<CR>
nnoremap b :CtrlPBuffer<CR>
" }

"Alternate.vim {
let g:alternateNoDefaultAlternate = 1
let g:alternateRelativeFiles = 1
"let g:alternateSearchPath = 'sfr:../source,sfr:../src,sfr:../include,sfr:../inc,reg:|\(\a\+\)\.dev\\source|\1\.dev\\\1|,reg:|\(\a\+\)\.dev\\\1|\1\.dev\\source|'
"let g:alternateSearchPath = 'sfr:../source,sfr:../src,sfr:../include,sfr:../inc,reg:|\(\a\+\)\.dev/source|\1\.dev/\1|,reg:|\(\a\+\)\.dev/\1|\1\.dev/source|'
let g:alternateSearchPath = 'reg:|\(\a\+\)\.dev/source/\a\+|\1\.dev/\1|,reg:|\(\a\+\)\.dev/\1|\1\.dev/source/**|'
let g:alternateExtensions_C = "h"
let g:alternateExtensions_h = "C"
" }

"Syntastic {
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


"C++ {
let g:syntastic_c_checkers=['cppcheck']
let g:syntastic_cpp_checkers=['cppcheck']
let g:syntastic_h_checkers=['cppcheck']
"let g:syntastic_c_compiler = 'clang++'
"let g:syntastic_cpp_checkers=['gcc']
"}

"JS{
let g:syntastic_javascript_checkers = ['eslint'] ", 'closurecompiler']
let g:syntastic_javascript_eslint_exec = 'eslint_d'
"}

"TypeScript{
let g:syntastic_typescript_checkers = ['tslint'] ", 'closurecompiler']
"}

"HTML {
let g:syntastic_html_checkers = ['jshint']

"}

"LESS{
let g:syntastic_less_checkers = ['lessc']
"}




"}

"Startify {
set viminfo='100,n$HOME/.vim/files/viminfo
let g:startify_session_dir = '~/.vim/files/sessions'
let g:startify_bookmarks = [
            \ '~/.vimrc.local', '~/.vimrc.bundles.local', './.gitignore',
            \ './.gitattributes'
            \ ]
"}

"Over.vim {

nmap <Leader>: :OverCommandLine<CR>

"}

" vim-ags {
let g:ags_agexe = '/usr/local/bin/ag'
"}

" YCM{
" let g:ycm_key_list_previous_completion=['<Up>']
autocmd FileType javascript setlocal omnifunc=tern#Complete
" YouCompleteMe
"let g:ycm_add_preview_to_completeopt=0
"let g:ycm_confirm_extra_conf=0
"let g:ycm_complete_in_comments = 1
"let g:ycm_collect_identifiers_from_comments_and_strings = 1
"let g:ycm_collect_identifiers_from_tags_files = 0
"let g:ycm_seed_identifiers_with_syntax = 1
" }

" OmniSharp{

let g:Omnisharp_start_server = 0
let g:OmniSharp_host = "http://10.0.2.2:8080"
" }

" UltiSnips {
let g:UltiSnipsExpandTrigger="<tab>"
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    echo g:ulti_expand_res
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
                return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<c-J>"
let g:UltiSnipsJumpBackwardTrigger="<c-K>"
let g:UltiSnipsListSnippets="<c-E>"
" this mapping Enter key to <C-y> to chose the current highlight item 
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"


" }

" local vimrc {
let g:localvimrc_count = 1
let g:localvimrc_persistent = 2
" }

" JS-Beautify {
au FileType typescript setlocal equalprg=tsfmt\ /dev/stdin
au FileType javascript setlocal equalprg=esformatter
au FileType html setlocal equalprg=node\ ~/.vim/bundle/js-beautify/js/bin/html-beautify.js\ -f\ -
au FileType less setlocal equalprg=node\ ~/.vim/bundle/js-beautify/js/bin/css-beautify.js\ -f\ -
au FileType css setlocal equalprg=node\ ~/.vim/bundle/js-beautify/js/bin/css-beautify.js\ -f\ -
" }

" Tern {
let g:tern_show_argument_hints = 'on move'
let g:tern_show_signature_in_pum = 1
let g:tern_map_keys = 1
" }

" vim-asterisk{
map *   <Plug>(asterisk-*)
map #   <Plug>(asterisk-#)
map g*  <Plug>(asterisk-g*)
map g#  <Plug>(asterisk-g#)
map z*  <Plug>(asterisk-z*)
map gz* <Plug>(asterisk-gz*)
map z#  <Plug>(asterisk-z#)
map gz# <Plug>(asterisk-gz#)
"}

" TypeScript-tools{
" }
"
" Vim-Commentary{
autocmd FileType cs set commentstring=//\ %s
" }

" vim-choosewin {
nmap  <C-w>-  <Plug>(choosewin)
" use overlay feature
let g:choosewin_overlay_enable = 1

" workaround for overlay font broken on mutibyte buffer.
let g:choosewin_overlay_clear_multibyte = 1

" tmux like overlay color
let g:choosewin_color_overlay = {
            \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
            \ 'cterm': [ 25, 25 ]
            \ }
let g:choosewin_color_overlay_current = {
            \ 'gui': ['firebrick1', 'firebrick1' ],
            \ 'cterm': [ 124, 124 ]
            \ }

let g:choosewin_blink_on_land      = 0 " dont' blink at land
let g:choosewin_statusline_replace = 0 " don't replace statusline
let g:choosewin_tabline_replace    = 0 " don't replace tabline

" }

" incsearch.vim{
" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
"}

" vim-asterisk{
map *   <Plug>(asterisk-*)
map #   <Plug>(asterisk-#)
map g*  <Plug>(asterisk-g*)
map g#  <Plug>(asterisk-g#)
map z*  <Plug>(asterisk-z*)
map gz* <Plug>(asterisk-gz*)
map z#  <Plug>(asterisk-z#)
map gz# <Plug>(asterisk-gz#)
"}


" VIM config{
set completeopt-=preview

set colorcolumn=80
set tabstop=2
set shiftwidth=2
set softtabstop=2

set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine

set ff=dos
set ffs=dos,unix

" move cto beginning of line
inoremap <Home> <C-c>^i
" Blinking cursor {
let &t_ti.="\eP\e[1 q\e\\"
let &t_te.="\eP\e[0 q\e\\"

let &t_SI.="\eP\e[5 q\e\\"
let &t_EI.="\eP\e[1 q\e\\"
"}

" XAML {
au BufNewFile,BufRead *.xaml setf xml
" }


" Arrow keys{
imap A <Up>
imap B <Down>
imap C <Right>
imap D <Left>
"}

"}

" Scripts{

" Ref files {
fu! GetRefFile()
    let l:refdir = finddir("ref", expand("%:p:h") . ";")
    return findfile(expand("%:p:t"), l:refdir . "/**/")
endf

fu! LoadRef()
    let l:filename = GetRefFile()
    if filereadable(l:filename)
        exec "vs" l:filename
    else
        echo "Ref for file " . l:filename . " not available"
    endif
endf

fu! DiffRef()
    let l:filename = GetRefFile()
    if filereadable(l:filename)
        exec "vert diffsplit" l:filename
    else
        echo "Ref for file " . l:filename . " not available"
    endif
endf
" }

" Insert single character {
function! RepeatChar(char, count)
    return repeat(a:char, a:count)
endfunction
nnoremap <Space> :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<CR>
nnoremap <Leader><Space> :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<CR>
"}

" }

